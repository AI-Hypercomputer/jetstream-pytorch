# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Offline Performance

on:
  pull_request:

jobs:
  py:
    name: "Offline micro benchmark"
    strategy:
      matrix:
        python-version: ['3.10']
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        source install_everything.sh
        wget https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
        chmod +x ./jq-linux-amd64
        env
        python -c "import jax; print(jax.devices())"
    - name: Run offlinebench
      env: 
        JAX_PLATFORMS: tpu,cpu
        HF_TOKEN : ${{ secrets.HF_TOKEN}}
      run: |
        set -euo pipefail
        source venv/bin/activate 
        JAX_PLATFORMS=tpu,cpu python -m jetstream_pt.cli benchmark_offline --model_id meta-llama/Meta-Llama-3-8B-Instruct --quantize_weights=0 --override_batch_size=128 --benchmark_save_offline_result_to_file=result.md --internal_use_random_weights=True --hf_token=$HF_TOKEN
        cat result.md | ./jq-linux-amd64 -Rsa . > output.txt
    - name: Update result to PR
      env: 
        URL: ${{ github.event.pull_request.comments_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data "{ \"body\": $(cat output.txt) }"

